import { AppState } from '../store';

import sweetAlert1 from '../audio/sweet-alert-1.wav';
import sweetAlert2 from '../audio/sweet-alert-2.wav';
import sweetAlert3 from '../audio/sweet-alert-3.wav';
import sweetAlert4 from '../audio/sweet-alert-4.wav';
import sweetAlert5 from '../audio/sweet-alert-5.wav';
import glowa from '../audio/glowa.wav';
import trial from '../audio/trial.wav';
import { centsToGBP } from './centsToGBP';
import { studyImg } from './GlobalVars';
import { ProlificStudy } from '../types';
import { appendLog } from '../pages/background';
const packageJson = require('../../package.json');

function playFile(file: any, volume: number) {
  const audio = new Audio(file);
  audio.volume = volume / 100;
  audio.play();
}

export function playAlertSound(state: AppState) {
  switch (state.settings.alert_sound) {
    case 'none':
      break;
    case 'sweet-alert-1':
      playFile(sweetAlert1, state.settings.alert_volume);
      break;
    case 'sweet-alert-2':
      playFile(sweetAlert2, state.settings.alert_volume);
      break;
    case 'sweet-alert-3':
      playFile(sweetAlert3, state.settings.alert_volume);
      break;
    case 'sweet-alert-4':
      playFile(sweetAlert4, state.settings.alert_volume);
      break;
    case 'sweet-alert-5':
      playFile(sweetAlert5, state.settings.alert_volume);
      break;
    case 'glowa':
      playFile(glowa, state.settings.alert_volume);
      break;
    case 'trial':
      playFile(trial, state.settings.alert_volume);
      break;
    case 'voice':
      const speech = new SpeechSynthesisUtterance('New studies available on Prolific.');
      speech.volume = state.settings.alert_volume / 100;
      speechSynthesis.speak(speech);
      break;
  }
}


export function createWebhookJSON(state: AppState, study: ProlificStudy) {
  let pings = '';
  const pingsRaw = state.settings.webhook.ping;
  pingsRaw.split(' ').forEach((el: any) => {
    pings += `<@${el.trim()}>`;
  });
  const img = study.researcher.institution && study.researcher.institution.logo
    ? study.researcher.institution.logo
    : studyImg;
  return {
    'content': null,
    'embeds': [
      {
        'description': 'New studies available on Prolific',
        'url': `https://app.prolific.co/studies/${study.id}`,
        'color': 32511,
        'fields': [
          {
            'name': 'Name',
            'value': `${study.name}`,
          },
          {
            'name': 'ID',
            'value': `${study.id}`,
          },
          {
            'name': 'URL',
            'value': '[Click!](https://app.prolific.co/studies/${study.id})',
          },
          {
            'name': 'Hosted by',
            'value': `${study.researcher.name}`,
          },
          {
            'name': 'Reward',
            'value': `${centsToGBP(study.reward)} - ${centsToGBP(study.average_reward_per_hour)}/h`,
          },
          {
            'name': 'Time',
            'value': `${study.estimated_completion_time}min - MAX: ${study.maximum_allowed_time}min`,
          },
          {
            'name': 'Places',
            'value': `${study.places_taken}/${study.total_available_places} - ${study.total_available_places - study.places_taken}`,
          },
          {
            'name': '',
            'value': `${pings}`,
          },
        ],
        'footer': {
          'text': `Generated by Prolific Assistant ${packageJson.version}`,
        },
        'timestamp': (new Date()).toISOString(),
        'thumbnail': {
          'url': img,
        },
      },
    ],
    'attachments': [],
  };
}

export function sendWebhook(state: AppState, study: ProlificStudy) {
  if (study.id.includes('TEST')) return;

  const hookUrl = state.settings.webhook.url;
  let pings = '';
  const pingsRaw = state.settings.webhook.ping;
  pingsRaw.split(' ').forEach((el: any) => {
    pings += `<@${el.trim()}>`;
  });

  if (hookUrl.length < 1) {
    appendLog('Webhook is empty, ignoring it', 'status', '');
    return;
  }

  if (!state.settings.webhook.enabled) return;

  async function sendWebhookAsync() {
    try {
      await fetch(hookUrl, {
        method: 'post',
        headers: { 'content-type': 'application/json' },
        body: JSON.stringify(createWebhookJSON(state, study)),
      });
    } catch (err) {
      appendLog('ERROR while sending to webhook', 'error', `ERROR while sending to webhook\nStudyID: ${study.id}\nERROR: ${JSON.stringify(err)}`);
    }
  }

  sendWebhookAsync();

}
